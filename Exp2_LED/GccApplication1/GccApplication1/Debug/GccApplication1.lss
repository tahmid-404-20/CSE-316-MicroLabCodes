
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000074a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010c  00800060  0000074a  000007de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080016c  0080016c  000008ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000091c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eda  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c2  00000000  00000000  00001872  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004fe  00000000  00000000  00001f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00002434  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a3  00000000  00000000  000024c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000023d  00000000  00000000  0000286b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002aa8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__ctors_end>
   4:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
   8:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
   c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  10:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  14:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  18:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  1c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  20:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  24:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  28:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  2c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  30:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  34:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  38:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  3c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  40:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  44:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  48:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  4c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  50:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  54:	db 01       	movw	r26, r22
  56:	e1 01       	movw	r28, r2
  58:	f8 01       	movw	r30, r16
  5a:	f8 01       	movw	r30, r16
  5c:	f8 01       	movw	r30, r16
  5e:	f8 01       	movw	r30, r16
  60:	f8 01       	movw	r30, r16
  62:	f8 01       	movw	r30, r16
  64:	f8 01       	movw	r30, r16
  66:	f8 01       	movw	r30, r16
  68:	f8 01       	movw	r30, r16
  6a:	f8 01       	movw	r30, r16
  6c:	f8 01       	movw	r30, r16
  6e:	f8 01       	movw	r30, r16
  70:	f8 01       	movw	r30, r16
  72:	f8 01       	movw	r30, r16
  74:	f8 01       	movw	r30, r16
  76:	f8 01       	movw	r30, r16
  78:	f8 01       	movw	r30, r16
  7a:	f3 01       	movw	r30, r6
  7c:	f8 01       	movw	r30, r16
  7e:	f8 01       	movw	r30, r16
  80:	f8 01       	movw	r30, r16
  82:	f8 01       	movw	r30, r16
  84:	f8 01       	movw	r30, r16
  86:	f8 01       	movw	r30, r16
  88:	f8 01       	movw	r30, r16
  8a:	f8 01       	movw	r30, r16
  8c:	f8 01       	movw	r30, r16
  8e:	f8 01       	movw	r30, r16
  90:	f8 01       	movw	r30, r16
  92:	ed 01       	movw	r28, r26
  94:	f8 01       	movw	r30, r16
  96:	3f 01       	movw	r6, r30
  98:	45 01       	movw	r8, r10
  9a:	4b 01       	movw	r8, r22
  9c:	51 01       	movw	r10, r2
  9e:	57 01       	movw	r10, r14
  a0:	5d 01       	movw	r10, r26
  a2:	63 01       	movw	r12, r6
  a4:	69 01       	movw	r12, r18
  a6:	6f 01       	movw	r12, r30
  a8:	75 01       	movw	r14, r10
  aa:	7b 01       	movw	r14, r22
  ac:	81 01       	movw	r16, r2
  ae:	87 01       	movw	r16, r14
  b0:	8d 01       	movw	r16, r26
  b2:	93 01       	movw	r18, r6
  b4:	99 01       	movw	r18, r18
  b6:	9f 01       	movw	r18, r30
  b8:	a5 01       	movw	r20, r10
  ba:	ab 01       	movw	r20, r22
  bc:	b1 01       	movw	r22, r2
  be:	b7 01       	movw	r22, r14
  c0:	bd 01       	movw	r22, r26
  c2:	c3 01       	movw	r24, r6
  c4:	c9 01       	movw	r24, r18
  c6:	cf 01       	movw	r24, r30
  c8:	d5 01       	movw	r26, r10
  ca:	f8 01       	movw	r30, r16
  cc:	f8 01       	movw	r30, r16
  ce:	f8 01       	movw	r30, r16
  d0:	f8 01       	movw	r30, r16
  d2:	f8 01       	movw	r30, r16
  d4:	f8 01       	movw	r30, r16
  d6:	f8 01       	movw	r30, r16
  d8:	f8 01       	movw	r30, r16
  da:	f8 01       	movw	r30, r16
  dc:	f8 01       	movw	r30, r16
  de:	f8 01       	movw	r30, r16
  e0:	f8 01       	movw	r30, r16
  e2:	f8 01       	movw	r30, r16
  e4:	f8 01       	movw	r30, r16
  e6:	f8 01       	movw	r30, r16
  e8:	f8 01       	movw	r30, r16
  ea:	f8 01       	movw	r30, r16
  ec:	f8 01       	movw	r30, r16
  ee:	f8 01       	movw	r30, r16
  f0:	f8 01       	movw	r30, r16
  f2:	f8 01       	movw	r30, r16
  f4:	f8 01       	movw	r30, r16
  f6:	f8 01       	movw	r30, r16
  f8:	f8 01       	movw	r30, r16
  fa:	e7 01       	movw	r28, r14

000000fc <__ctors_end>:
  fc:	11 24       	eor	r1, r1
  fe:	1f be       	out	0x3f, r1	; 63
 100:	cf e5       	ldi	r28, 0x5F	; 95
 102:	d8 e0       	ldi	r29, 0x08	; 8
 104:	de bf       	out	0x3e, r29	; 62
 106:	cd bf       	out	0x3d, r28	; 61

00000108 <__do_copy_data>:
 108:	11 e0       	ldi	r17, 0x01	; 1
 10a:	a0 e6       	ldi	r26, 0x60	; 96
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	ea e4       	ldi	r30, 0x4A	; 74
 110:	f7 e0       	ldi	r31, 0x07	; 7
 112:	02 c0       	rjmp	.+4      	; 0x118 <__do_copy_data+0x10>
 114:	05 90       	lpm	r0, Z+
 116:	0d 92       	st	X+, r0
 118:	ac 36       	cpi	r26, 0x6C	; 108
 11a:	b1 07       	cpc	r27, r17
 11c:	d9 f7       	brne	.-10     	; 0x114 <__do_copy_data+0xc>

0000011e <__do_clear_bss>:
 11e:	21 e0       	ldi	r18, 0x01	; 1
 120:	ac e6       	ldi	r26, 0x6C	; 108
 122:	b1 e0       	ldi	r27, 0x01	; 1
 124:	01 c0       	rjmp	.+2      	; 0x128 <.do_clear_bss_start>

00000126 <.do_clear_bss_loop>:
 126:	1d 92       	st	X+, r1

00000128 <.do_clear_bss_start>:
 128:	a6 37       	cpi	r26, 0x76	; 118
 12a:	b2 07       	cpc	r27, r18
 12c:	e1 f7       	brne	.-8      	; 0x126 <.do_clear_bss_loop>
 12e:	0e 94 23 02 	call	0x446	; 0x446 <main>
 132:	0c 94 a3 03 	jmp	0x746	; 0x746 <_exit>

00000136 <__bad_interrupt>:
 136:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000013a <load>:
 int invert = 0;
 int length = 0;
 int start = 0;
 
 void load(unsigned char *ch, unsigned char *arr)
 {
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	dc 01       	movw	r26, r24
    arr[start] = ch[0]^invert;
 140:	c0 91 6c 01 	lds	r28, 0x016C	; 0x80016c <__data_end>
 144:	d0 91 6d 01 	lds	r29, 0x016D	; 0x80016d <__data_end+0x1>
 148:	c6 0f       	add	r28, r22
 14a:	d7 1f       	adc	r29, r23
 14c:	8c 91       	ld	r24, X
 14e:	e0 e7       	ldi	r30, 0x70	; 112
 150:	f1 e0       	ldi	r31, 0x01	; 1
 152:	90 81       	ld	r25, Z
 154:	89 27       	eor	r24, r25
 156:	88 83       	st	Y, r24
    arr[start+1] = ch[1]^invert;
 158:	c0 91 6c 01 	lds	r28, 0x016C	; 0x80016c <__data_end>
 15c:	d0 91 6d 01 	lds	r29, 0x016D	; 0x80016d <__data_end+0x1>
 160:	21 96       	adiw	r28, 0x01	; 1
 162:	c6 0f       	add	r28, r22
 164:	d7 1f       	adc	r29, r23
 166:	11 96       	adiw	r26, 0x01	; 1
 168:	8c 91       	ld	r24, X
 16a:	11 97       	sbiw	r26, 0x01	; 1
 16c:	90 81       	ld	r25, Z
 16e:	89 27       	eor	r24, r25
 170:	88 83       	st	Y, r24
    arr[start+2] = ch[2]^invert;
 172:	c0 91 6c 01 	lds	r28, 0x016C	; 0x80016c <__data_end>
 176:	d0 91 6d 01 	lds	r29, 0x016D	; 0x80016d <__data_end+0x1>
 17a:	22 96       	adiw	r28, 0x02	; 2
 17c:	c6 0f       	add	r28, r22
 17e:	d7 1f       	adc	r29, r23
 180:	12 96       	adiw	r26, 0x02	; 2
 182:	8c 91       	ld	r24, X
 184:	12 97       	sbiw	r26, 0x02	; 2
 186:	90 81       	ld	r25, Z
 188:	89 27       	eor	r24, r25
 18a:	88 83       	st	Y, r24
    arr[start+3] = ch[3]^invert;
 18c:	c0 91 6c 01 	lds	r28, 0x016C	; 0x80016c <__data_end>
 190:	d0 91 6d 01 	lds	r29, 0x016D	; 0x80016d <__data_end+0x1>
 194:	23 96       	adiw	r28, 0x03	; 3
 196:	c6 0f       	add	r28, r22
 198:	d7 1f       	adc	r29, r23
 19a:	13 96       	adiw	r26, 0x03	; 3
 19c:	8c 91       	ld	r24, X
 19e:	13 97       	sbiw	r26, 0x03	; 3
 1a0:	90 81       	ld	r25, Z
 1a2:	89 27       	eor	r24, r25
 1a4:	88 83       	st	Y, r24
    arr[start+4] = ch[4]^invert;
 1a6:	c0 91 6c 01 	lds	r28, 0x016C	; 0x80016c <__data_end>
 1aa:	d0 91 6d 01 	lds	r29, 0x016D	; 0x80016d <__data_end+0x1>
 1ae:	24 96       	adiw	r28, 0x04	; 4
 1b0:	c6 0f       	add	r28, r22
 1b2:	d7 1f       	adc	r29, r23
 1b4:	14 96       	adiw	r26, 0x04	; 4
 1b6:	8c 91       	ld	r24, X
 1b8:	14 97       	sbiw	r26, 0x04	; 4
 1ba:	90 81       	ld	r25, Z
 1bc:	89 27       	eor	r24, r25
 1be:	88 83       	st	Y, r24
    arr[start+5] = ch[5]^invert;
 1c0:	c0 91 6c 01 	lds	r28, 0x016C	; 0x80016c <__data_end>
 1c4:	d0 91 6d 01 	lds	r29, 0x016D	; 0x80016d <__data_end+0x1>
 1c8:	25 96       	adiw	r28, 0x05	; 5
 1ca:	c6 0f       	add	r28, r22
 1cc:	d7 1f       	adc	r29, r23
 1ce:	15 96       	adiw	r26, 0x05	; 5
 1d0:	8c 91       	ld	r24, X
 1d2:	15 97       	sbiw	r26, 0x05	; 5
 1d4:	90 81       	ld	r25, Z
 1d6:	89 27       	eor	r24, r25
 1d8:	88 83       	st	Y, r24
    arr[start+6] = ch[6]^invert;
 1da:	c0 91 6c 01 	lds	r28, 0x016C	; 0x80016c <__data_end>
 1de:	d0 91 6d 01 	lds	r29, 0x016D	; 0x80016d <__data_end+0x1>
 1e2:	26 96       	adiw	r28, 0x06	; 6
 1e4:	c6 0f       	add	r28, r22
 1e6:	d7 1f       	adc	r29, r23
 1e8:	16 96       	adiw	r26, 0x06	; 6
 1ea:	8c 91       	ld	r24, X
 1ec:	16 97       	sbiw	r26, 0x06	; 6
 1ee:	90 81       	ld	r25, Z
 1f0:	89 27       	eor	r24, r25
 1f2:	88 83       	st	Y, r24
    arr[start+7] = ch[7]^invert;
 1f4:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__data_end>
 1f8:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <__data_end+0x1>
 1fc:	07 96       	adiw	r24, 0x07	; 7
 1fe:	eb 01       	movw	r28, r22
 200:	c8 0f       	add	r28, r24
 202:	d9 1f       	adc	r29, r25
 204:	17 96       	adiw	r26, 0x07	; 7
 206:	8c 91       	ld	r24, X
 208:	90 81       	ld	r25, Z
 20a:	89 27       	eor	r24, r25
 20c:	88 83       	st	Y, r24
    start+=8;
 20e:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__data_end>
 212:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <__data_end+0x1>
 216:	08 96       	adiw	r24, 0x08	; 8
 218:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <__data_end+0x1>
 21c:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <__data_end>
 }    
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <loadArr>:
 
 unsigned char* loadArr(unsigned char* str)
 {
 226:	0f 93       	push	r16
 228:	1f 93       	push	r17
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	ec 01       	movw	r28, r24
    start = 0;
 230:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <__data_end+0x1>
 234:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <__data_end>
    int l = strlen((char*)str);
 238:	fc 01       	movw	r30, r24
 23a:	01 90       	ld	r0, Z+
 23c:	00 20       	and	r0, r0
 23e:	e9 f7       	brne	.-6      	; 0x23a <loadArr+0x14>
 240:	31 97       	sbiw	r30, 0x01	; 1
 242:	cf 01       	movw	r24, r30
 244:	8c 1b       	sub	r24, r28
 246:	9d 0b       	sbc	r25, r29
    length = (l+1)*8;
 248:	01 96       	adiw	r24, 0x01	; 1
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <length+0x1>
 25a:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <length>
    unsigned char* arr = (unsigned char *)malloc(length * sizeof(char));
 25e:	0e 94 82 02 	call	0x504	; 0x504 <malloc>
 262:	8c 01       	movw	r16, r24
    while(*str){
 264:	c6 c0       	rjmp	.+396    	; 0x3f2 <loadArr+0x1cc>
        switch(*str){
 266:	8e 2f       	mov	r24, r30
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	fc 01       	movw	r30, r24
 26c:	b0 97       	sbiw	r30, 0x20	; 32
 26e:	e4 35       	cpi	r30, 0x54	; 84
 270:	f1 05       	cpc	r31, r1
 272:	08 f0       	brcs	.+2      	; 0x276 <loadArr+0x50>
 274:	bd c0       	rjmp	.+378    	; 0x3f0 <loadArr+0x1ca>
 276:	e6 5d       	subi	r30, 0xD6	; 214
 278:	ff 4f       	sbci	r31, 0xFF	; 255
 27a:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__tablejump2__>
            case 'A':
                load(A, arr);
 27e:	b8 01       	movw	r22, r16
 280:	86 e5       	ldi	r24, 0x56	; 86
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
                break;
 288:	b3 c0       	rjmp	.+358    	; 0x3f0 <loadArr+0x1ca>
            case 'B':
                load(B, arr);
 28a:	b8 01       	movw	r22, r16
 28c:	8e e4       	ldi	r24, 0x4E	; 78
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
                break;
 294:	ad c0       	rjmp	.+346    	; 0x3f0 <loadArr+0x1ca>
            case 'C':
                load(C, arr);
 296:	b8 01       	movw	r22, r16
 298:	86 e4       	ldi	r24, 0x46	; 70
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
                break;
 2a0:	a7 c0       	rjmp	.+334    	; 0x3f0 <loadArr+0x1ca>
            case 'D':
                load(D, arr);
 2a2:	b8 01       	movw	r22, r16
 2a4:	8e e3       	ldi	r24, 0x3E	; 62
 2a6:	91 e0       	ldi	r25, 0x01	; 1
 2a8:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
                break;
 2ac:	a1 c0       	rjmp	.+322    	; 0x3f0 <loadArr+0x1ca>
            case 'E':
                load(E, arr);
 2ae:	b8 01       	movw	r22, r16
 2b0:	86 e3       	ldi	r24, 0x36	; 54
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
                break;
 2b8:	9b c0       	rjmp	.+310    	; 0x3f0 <loadArr+0x1ca>
            case 'F':
                load(F, arr);
 2ba:	b8 01       	movw	r22, r16
 2bc:	8e e2       	ldi	r24, 0x2E	; 46
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
                break;
 2c4:	95 c0       	rjmp	.+298    	; 0x3f0 <loadArr+0x1ca>
            case 'G':
                load(G, arr);
 2c6:	b8 01       	movw	r22, r16
 2c8:	86 e2       	ldi	r24, 0x26	; 38
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
                break;
 2d0:	8f c0       	rjmp	.+286    	; 0x3f0 <loadArr+0x1ca>
            case 'H':
                load(H, arr);
 2d2:	b8 01       	movw	r22, r16
 2d4:	8e e1       	ldi	r24, 0x1E	; 30
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
                break;
 2dc:	89 c0       	rjmp	.+274    	; 0x3f0 <loadArr+0x1ca>
            case 'I':
                load(I, arr);
 2de:	b8 01       	movw	r22, r16
 2e0:	86 e1       	ldi	r24, 0x16	; 22
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
                break;
 2e8:	83 c0       	rjmp	.+262    	; 0x3f0 <loadArr+0x1ca>
            case 'J':
                load(J, arr);
 2ea:	b8 01       	movw	r22, r16
 2ec:	8e e0       	ldi	r24, 0x0E	; 14
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
                break;
 2f4:	7d c0       	rjmp	.+250    	; 0x3f0 <loadArr+0x1ca>
            case 'K':
                load(K, arr);
 2f6:	b8 01       	movw	r22, r16
 2f8:	86 e0       	ldi	r24, 0x06	; 6
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
                break;
 300:	77 c0       	rjmp	.+238    	; 0x3f0 <loadArr+0x1ca>
            case 'L':
                load(L, arr);
 302:	b8 01       	movw	r22, r16
 304:	8e ef       	ldi	r24, 0xFE	; 254
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
                break;
 30c:	71 c0       	rjmp	.+226    	; 0x3f0 <loadArr+0x1ca>
            case 'M':
                load(M, arr);
 30e:	b8 01       	movw	r22, r16
 310:	86 ef       	ldi	r24, 0xF6	; 246
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
                break;
 318:	6b c0       	rjmp	.+214    	; 0x3f0 <loadArr+0x1ca>
            case 'N':
                load(N, arr);
 31a:	b8 01       	movw	r22, r16
 31c:	8e ee       	ldi	r24, 0xEE	; 238
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
                break;
 324:	65 c0       	rjmp	.+202    	; 0x3f0 <loadArr+0x1ca>
            case 'O':
                load(O, arr);
 326:	b8 01       	movw	r22, r16
 328:	86 ee       	ldi	r24, 0xE6	; 230
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
                break;
 330:	5f c0       	rjmp	.+190    	; 0x3f0 <loadArr+0x1ca>
            case 'P':
                load(P, arr);
 332:	b8 01       	movw	r22, r16
 334:	8e ed       	ldi	r24, 0xDE	; 222
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
                break;
 33c:	59 c0       	rjmp	.+178    	; 0x3f0 <loadArr+0x1ca>
            case 'Q':
                load(Q, arr);
 33e:	b8 01       	movw	r22, r16
 340:	86 ed       	ldi	r24, 0xD6	; 214
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
                break;
 348:	53 c0       	rjmp	.+166    	; 0x3f0 <loadArr+0x1ca>
            case 'R':
                load(R, arr);
 34a:	b8 01       	movw	r22, r16
 34c:	8e ec       	ldi	r24, 0xCE	; 206
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
                break;
 354:	4d c0       	rjmp	.+154    	; 0x3f0 <loadArr+0x1ca>
            case 'S':
                load(S, arr);
 356:	b8 01       	movw	r22, r16
 358:	86 ec       	ldi	r24, 0xC6	; 198
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
                break;
 360:	47 c0       	rjmp	.+142    	; 0x3f0 <loadArr+0x1ca>
            case 'T':
                load(T, arr);
 362:	b8 01       	movw	r22, r16
 364:	8e eb       	ldi	r24, 0xBE	; 190
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
                break;
 36c:	41 c0       	rjmp	.+130    	; 0x3f0 <loadArr+0x1ca>
            case 'U':
                load(U, arr);
 36e:	b8 01       	movw	r22, r16
 370:	86 eb       	ldi	r24, 0xB6	; 182
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
                break;
 378:	3b c0       	rjmp	.+118    	; 0x3f0 <loadArr+0x1ca>
            case 'V':
                load(V, arr);
 37a:	b8 01       	movw	r22, r16
 37c:	8e ea       	ldi	r24, 0xAE	; 174
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
                break;
 384:	35 c0       	rjmp	.+106    	; 0x3f0 <loadArr+0x1ca>
            case 'W':
                load(W, arr);
 386:	b8 01       	movw	r22, r16
 388:	86 ea       	ldi	r24, 0xA6	; 166
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
                break;
 390:	2f c0       	rjmp	.+94     	; 0x3f0 <loadArr+0x1ca>
            case 'X':
                load(X, arr);
 392:	b8 01       	movw	r22, r16
 394:	8e e9       	ldi	r24, 0x9E	; 158
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
                break;
 39c:	29 c0       	rjmp	.+82     	; 0x3f0 <loadArr+0x1ca>
            case 'Y':
                load(Y, arr);
 39e:	b8 01       	movw	r22, r16
 3a0:	86 e9       	ldi	r24, 0x96	; 150
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
                break;
 3a8:	23 c0       	rjmp	.+70     	; 0x3f0 <loadArr+0x1ca>
            case 'Z':
                load(Z, arr);
 3aa:	b8 01       	movw	r22, r16
 3ac:	8e e8       	ldi	r24, 0x8E	; 142
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
                break;
 3b4:	1d c0       	rjmp	.+58     	; 0x3f0 <loadArr+0x1ca>
            case ' ':
                load(SPACE, arr);
 3b6:	b8 01       	movw	r22, r16
 3b8:	86 e8       	ldi	r24, 0x86	; 134
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
                break;
 3c0:	17 c0       	rjmp	.+46     	; 0x3f0 <loadArr+0x1ca>
            case '!':
                load(EXCLAMATION, arr);
 3c2:	b8 01       	movw	r22, r16
 3c4:	8e e7       	ldi	r24, 0x7E	; 126
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
                break;
 3cc:	11 c0       	rjmp	.+34     	; 0x3f0 <loadArr+0x1ca>
            case 's':
                load(SMILEY, arr);
 3ce:	b8 01       	movw	r22, r16
 3d0:	86 e7       	ldi	r24, 0x76	; 118
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
                break;
 3d8:	0b c0       	rjmp	.+22     	; 0x3f0 <loadArr+0x1ca>
            case '?':
                load(QUESTION, arr);
 3da:	b8 01       	movw	r22, r16
 3dc:	8e e6       	ldi	r24, 0x6E	; 110
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
                break;
 3e4:	05 c0       	rjmp	.+10     	; 0x3f0 <loadArr+0x1ca>
			case '3':
				load(THREE, arr);
 3e6:	b8 01       	movw	r22, r16
 3e8:	86 e6       	ldi	r24, 0x66	; 102
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
				break;
        }
        str++;
 3f0:	21 96       	adiw	r28, 0x01	; 1
 {
    start = 0;
    int l = strlen((char*)str);
    length = (l+1)*8;
    unsigned char* arr = (unsigned char *)malloc(length * sizeof(char));
    while(*str){
 3f2:	e8 81       	ld	r30, Y
 3f4:	e1 11       	cpse	r30, r1
 3f6:	37 cf       	rjmp	.-402    	; 0x266 <loadArr+0x40>
				load(THREE, arr);
				break;
        }
        str++;
    }
    load(SPACE, arr);
 3f8:	b8 01       	movw	r22, r16
 3fa:	86 e8       	ldi	r24, 0x86	; 134
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0e 94 9d 00 	call	0x13a	; 0x13a <load>
    return arr;
 }
 402:	c8 01       	movw	r24, r16
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	1f 91       	pop	r17
 40a:	0f 91       	pop	r16
 40c:	08 95       	ret

0000040e <getLength>:
 
 int getLength()
 {
     return length;
 40e:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <length>
 412:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <length+0x1>
 416:	08 95       	ret

00000418 <drift>:
#include<avr/io.h>
#include<util/delay.h>
#include"LED.h"

void drift(unsigned char *arr, int slen)
{
 418:	dc 01       	movw	r26, r24
	unsigned char a = arr[0];
 41a:	8c 91       	ld	r24, X
	for(int i=0; i<slen-1; i++){
 41c:	20 e0       	ldi	r18, 0x00	; 0
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	07 c0       	rjmp	.+14     	; 0x430 <drift+0x18>
		arr[i] = arr[i+1];
 422:	fd 01       	movw	r30, r26
 424:	e2 0f       	add	r30, r18
 426:	f3 1f       	adc	r31, r19
 428:	91 81       	ldd	r25, Z+1	; 0x01
 42a:	90 83       	st	Z, r25
#include"LED.h"

void drift(unsigned char *arr, int slen)
{
	unsigned char a = arr[0];
	for(int i=0; i<slen-1; i++){
 42c:	2f 5f       	subi	r18, 0xFF	; 255
 42e:	3f 4f       	sbci	r19, 0xFF	; 255
 430:	ab 01       	movw	r20, r22
 432:	41 50       	subi	r20, 0x01	; 1
 434:	51 09       	sbc	r21, r1
 436:	24 17       	cp	r18, r20
 438:	35 07       	cpc	r19, r21
 43a:	9c f3       	brlt	.-26     	; 0x422 <drift+0xa>
		arr[i] = arr[i+1];
	}
	arr[slen-1] = a;
 43c:	fd 01       	movw	r30, r26
 43e:	e4 0f       	add	r30, r20
 440:	f5 1f       	adc	r31, r21
 442:	80 83       	st	Z, r24
 444:	08 95       	ret

00000446 <main>:
}

int main()
{
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	cd b7       	in	r28, 0x3d	; 61
 44c:	de b7       	in	r29, 0x3e	; 62
 44e:	28 97       	sbiw	r28, 0x08	; 8
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	f8 94       	cli
 454:	de bf       	out	0x3e, r29	; 62
 456:	0f be       	out	0x3f, r0	; 63
 458:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0b11111111;
 45a:	8f ef       	ldi	r24, 0xFF	; 255
 45c:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0b11111111;
 45e:	87 bb       	out	0x17, r24	; 23
	DDRD = 0b00000000;
 460:	11 ba       	out	0x11, r1	; 17
	invert = 0b11111111;
 462:	8f ef       	ldi	r24, 0xFF	; 255
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <invert+0x1>
 46a:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <invert>
	unsigned char* row = loadArr((unsigned char*)"CSE ");
 46e:	86 e6       	ldi	r24, 0x66	; 102
 470:	91 e0       	ldi	r25, 0x01	; 1
 472:	0e 94 13 01 	call	0x226	; 0x226 <loadArr>
 476:	6c 01       	movw	r12, r24
	//unsigned char row[8] = {0b11111111, 0b11111111, 0b01000110, 0b11110110, 0b11110110, 0b11110000, 0b11111111, 0b11111111};
	unsigned char column[] = {0b00000001, 0b00000010, 0b00000100, 0b00001000, 0b00010000, 0b00100000, 0b01000000, 0b10000000};
 478:	88 e0       	ldi	r24, 0x08	; 8
 47a:	ee e5       	ldi	r30, 0x5E	; 94
 47c:	f1 e0       	ldi	r31, 0x01	; 1
 47e:	de 01       	movw	r26, r28
 480:	11 96       	adiw	r26, 0x01	; 1
 482:	01 90       	ld	r0, Z+
 484:	0d 92       	st	X+, r0
 486:	8a 95       	dec	r24
 488:	e1 f7       	brne	.-8      	; 0x482 <main+0x3c>
	int slen = getLength();
 48a:	0e 94 07 02 	call	0x40e	; 0x40e <getLength>
 48e:	7c 01       	movw	r14, r24
	//int slen = 8;
	int i = 0;
	int j = 0;
 490:	20 e0       	ldi	r18, 0x00	; 0
 492:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char* row = loadArr((unsigned char*)"CSE ");
	//unsigned char row[8] = {0b11111111, 0b11111111, 0b01000110, 0b11110110, 0b11110110, 0b11110000, 0b11111111, 0b11111111};
	unsigned char column[] = {0b00000001, 0b00000010, 0b00000100, 0b00001000, 0b00010000, 0b00100000, 0b01000000, 0b10000000};
	int slen = getLength();
	//int slen = 8;
	int i = 0;
 494:	00 e0       	ldi	r16, 0x00	; 0
 496:	10 e0       	ldi	r17, 0x00	; 0
	int j = 0;
	
	
	while(1){
		if(j == 3000){
 498:	28 3b       	cpi	r18, 0xB8	; 184
 49a:	8b e0       	ldi	r24, 0x0B	; 11
 49c:	38 07       	cpc	r19, r24
 49e:	59 f4       	brne	.+22     	; 0x4b6 <main+0x70>
			int in = PIND;
			if(in & 1){
 4a0:	80 9b       	sbis	0x10, 0	; 16
 4a2:	07 c0       	rjmp	.+14     	; 0x4b2 <main+0x6c>
				drift(row, slen);
 4a4:	b7 01       	movw	r22, r14
 4a6:	c6 01       	movw	r24, r12
 4a8:	0e 94 0c 02 	call	0x418	; 0x418 <drift>
			}
			j = 0;
 4ac:	20 e0       	ldi	r18, 0x00	; 0
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <main+0x70>
 4b2:	20 e0       	ldi	r18, 0x00	; 0
 4b4:	30 e0       	ldi	r19, 0x00	; 0
		}
		PORTA = column[i]^invert;
 4b6:	e1 e0       	ldi	r30, 0x01	; 1
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	ec 0f       	add	r30, r28
 4bc:	fd 1f       	adc	r31, r29
 4be:	e0 0f       	add	r30, r16
 4c0:	f1 1f       	adc	r31, r17
 4c2:	90 81       	ld	r25, Z
 4c4:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <invert>
 4c8:	89 27       	eor	r24, r25
 4ca:	8b bb       	out	0x1b, r24	; 27
		PORTB = row[i];
 4cc:	f6 01       	movw	r30, r12
 4ce:	e0 0f       	add	r30, r16
 4d0:	f1 1f       	adc	r31, r17
 4d2:	80 81       	ld	r24, Z
 4d4:	88 bb       	out	0x18, r24	; 24
		i++;
 4d6:	c8 01       	movw	r24, r16
 4d8:	01 96       	adiw	r24, 0x01	; 1
		i = i%8;
 4da:	87 70       	andi	r24, 0x07	; 7
 4dc:	90 78       	andi	r25, 0x80	; 128
 4de:	99 23       	and	r25, r25
 4e0:	24 f4       	brge	.+8      	; 0x4ea <main+0xa4>
 4e2:	01 97       	sbiw	r24, 0x01	; 1
 4e4:	88 6f       	ori	r24, 0xF8	; 248
 4e6:	9f 6f       	ori	r25, 0xFF	; 255
 4e8:	01 96       	adiw	r24, 0x01	; 1
 4ea:	8c 01       	movw	r16, r24
		j++;
 4ec:	2f 5f       	subi	r18, 0xFF	; 255
 4ee:	3f 4f       	sbci	r19, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4f0:	8a e0       	ldi	r24, 0x0A	; 10
 4f2:	8a 95       	dec	r24
 4f4:	f1 f7       	brne	.-4      	; 0x4f2 <main+0xac>
 4f6:	d0 cf       	rjmp	.-96     	; 0x498 <main+0x52>

000004f8 <__tablejump2__>:
 4f8:	ee 0f       	add	r30, r30
 4fa:	ff 1f       	adc	r31, r31
 4fc:	05 90       	lpm	r0, Z+
 4fe:	f4 91       	lpm	r31, Z
 500:	e0 2d       	mov	r30, r0
 502:	09 94       	ijmp

00000504 <malloc>:
 504:	0f 93       	push	r16
 506:	1f 93       	push	r17
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	82 30       	cpi	r24, 0x02	; 2
 50e:	91 05       	cpc	r25, r1
 510:	10 f4       	brcc	.+4      	; 0x516 <malloc+0x12>
 512:	82 e0       	ldi	r24, 0x02	; 2
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	e0 91 74 01 	lds	r30, 0x0174	; 0x800174 <__flp>
 51a:	f0 91 75 01 	lds	r31, 0x0175	; 0x800175 <__flp+0x1>
 51e:	20 e0       	ldi	r18, 0x00	; 0
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	a0 e0       	ldi	r26, 0x00	; 0
 524:	b0 e0       	ldi	r27, 0x00	; 0
 526:	30 97       	sbiw	r30, 0x00	; 0
 528:	19 f1       	breq	.+70     	; 0x570 <malloc+0x6c>
 52a:	40 81       	ld	r20, Z
 52c:	51 81       	ldd	r21, Z+1	; 0x01
 52e:	02 81       	ldd	r16, Z+2	; 0x02
 530:	13 81       	ldd	r17, Z+3	; 0x03
 532:	48 17       	cp	r20, r24
 534:	59 07       	cpc	r21, r25
 536:	c8 f0       	brcs	.+50     	; 0x56a <malloc+0x66>
 538:	84 17       	cp	r24, r20
 53a:	95 07       	cpc	r25, r21
 53c:	69 f4       	brne	.+26     	; 0x558 <malloc+0x54>
 53e:	10 97       	sbiw	r26, 0x00	; 0
 540:	31 f0       	breq	.+12     	; 0x54e <malloc+0x4a>
 542:	12 96       	adiw	r26, 0x02	; 2
 544:	0c 93       	st	X, r16
 546:	12 97       	sbiw	r26, 0x02	; 2
 548:	13 96       	adiw	r26, 0x03	; 3
 54a:	1c 93       	st	X, r17
 54c:	27 c0       	rjmp	.+78     	; 0x59c <malloc+0x98>
 54e:	00 93 74 01 	sts	0x0174, r16	; 0x800174 <__flp>
 552:	10 93 75 01 	sts	0x0175, r17	; 0x800175 <__flp+0x1>
 556:	22 c0       	rjmp	.+68     	; 0x59c <malloc+0x98>
 558:	21 15       	cp	r18, r1
 55a:	31 05       	cpc	r19, r1
 55c:	19 f0       	breq	.+6      	; 0x564 <malloc+0x60>
 55e:	42 17       	cp	r20, r18
 560:	53 07       	cpc	r21, r19
 562:	18 f4       	brcc	.+6      	; 0x56a <malloc+0x66>
 564:	9a 01       	movw	r18, r20
 566:	bd 01       	movw	r22, r26
 568:	ef 01       	movw	r28, r30
 56a:	df 01       	movw	r26, r30
 56c:	f8 01       	movw	r30, r16
 56e:	db cf       	rjmp	.-74     	; 0x526 <malloc+0x22>
 570:	21 15       	cp	r18, r1
 572:	31 05       	cpc	r19, r1
 574:	f9 f0       	breq	.+62     	; 0x5b4 <malloc+0xb0>
 576:	28 1b       	sub	r18, r24
 578:	39 0b       	sbc	r19, r25
 57a:	24 30       	cpi	r18, 0x04	; 4
 57c:	31 05       	cpc	r19, r1
 57e:	80 f4       	brcc	.+32     	; 0x5a0 <malloc+0x9c>
 580:	8a 81       	ldd	r24, Y+2	; 0x02
 582:	9b 81       	ldd	r25, Y+3	; 0x03
 584:	61 15       	cp	r22, r1
 586:	71 05       	cpc	r23, r1
 588:	21 f0       	breq	.+8      	; 0x592 <malloc+0x8e>
 58a:	fb 01       	movw	r30, r22
 58c:	93 83       	std	Z+3, r25	; 0x03
 58e:	82 83       	std	Z+2, r24	; 0x02
 590:	04 c0       	rjmp	.+8      	; 0x59a <malloc+0x96>
 592:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <__flp+0x1>
 596:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <__flp>
 59a:	fe 01       	movw	r30, r28
 59c:	32 96       	adiw	r30, 0x02	; 2
 59e:	44 c0       	rjmp	.+136    	; 0x628 <malloc+0x124>
 5a0:	fe 01       	movw	r30, r28
 5a2:	e2 0f       	add	r30, r18
 5a4:	f3 1f       	adc	r31, r19
 5a6:	81 93       	st	Z+, r24
 5a8:	91 93       	st	Z+, r25
 5aa:	22 50       	subi	r18, 0x02	; 2
 5ac:	31 09       	sbc	r19, r1
 5ae:	39 83       	std	Y+1, r19	; 0x01
 5b0:	28 83       	st	Y, r18
 5b2:	3a c0       	rjmp	.+116    	; 0x628 <malloc+0x124>
 5b4:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <__brkval>
 5b8:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <__brkval+0x1>
 5bc:	23 2b       	or	r18, r19
 5be:	41 f4       	brne	.+16     	; 0x5d0 <malloc+0xcc>
 5c0:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 5c4:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 5c8:	30 93 73 01 	sts	0x0173, r19	; 0x800173 <__brkval+0x1>
 5cc:	20 93 72 01 	sts	0x0172, r18	; 0x800172 <__brkval>
 5d0:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 5d4:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 5d8:	21 15       	cp	r18, r1
 5da:	31 05       	cpc	r19, r1
 5dc:	41 f4       	brne	.+16     	; 0x5ee <malloc+0xea>
 5de:	2d b7       	in	r18, 0x3d	; 61
 5e0:	3e b7       	in	r19, 0x3e	; 62
 5e2:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 5e6:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 5ea:	24 1b       	sub	r18, r20
 5ec:	35 0b       	sbc	r19, r21
 5ee:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <__brkval>
 5f2:	f0 91 73 01 	lds	r31, 0x0173	; 0x800173 <__brkval+0x1>
 5f6:	e2 17       	cp	r30, r18
 5f8:	f3 07       	cpc	r31, r19
 5fa:	a0 f4       	brcc	.+40     	; 0x624 <malloc+0x120>
 5fc:	2e 1b       	sub	r18, r30
 5fe:	3f 0b       	sbc	r19, r31
 600:	28 17       	cp	r18, r24
 602:	39 07       	cpc	r19, r25
 604:	78 f0       	brcs	.+30     	; 0x624 <malloc+0x120>
 606:	ac 01       	movw	r20, r24
 608:	4e 5f       	subi	r20, 0xFE	; 254
 60a:	5f 4f       	sbci	r21, 0xFF	; 255
 60c:	24 17       	cp	r18, r20
 60e:	35 07       	cpc	r19, r21
 610:	48 f0       	brcs	.+18     	; 0x624 <malloc+0x120>
 612:	4e 0f       	add	r20, r30
 614:	5f 1f       	adc	r21, r31
 616:	50 93 73 01 	sts	0x0173, r21	; 0x800173 <__brkval+0x1>
 61a:	40 93 72 01 	sts	0x0172, r20	; 0x800172 <__brkval>
 61e:	81 93       	st	Z+, r24
 620:	91 93       	st	Z+, r25
 622:	02 c0       	rjmp	.+4      	; 0x628 <malloc+0x124>
 624:	e0 e0       	ldi	r30, 0x00	; 0
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	cf 01       	movw	r24, r30
 62a:	df 91       	pop	r29
 62c:	cf 91       	pop	r28
 62e:	1f 91       	pop	r17
 630:	0f 91       	pop	r16
 632:	08 95       	ret

00000634 <free>:
 634:	cf 93       	push	r28
 636:	df 93       	push	r29
 638:	00 97       	sbiw	r24, 0x00	; 0
 63a:	09 f4       	brne	.+2      	; 0x63e <free+0xa>
 63c:	81 c0       	rjmp	.+258    	; 0x740 <free+0x10c>
 63e:	fc 01       	movw	r30, r24
 640:	32 97       	sbiw	r30, 0x02	; 2
 642:	13 82       	std	Z+3, r1	; 0x03
 644:	12 82       	std	Z+2, r1	; 0x02
 646:	a0 91 74 01 	lds	r26, 0x0174	; 0x800174 <__flp>
 64a:	b0 91 75 01 	lds	r27, 0x0175	; 0x800175 <__flp+0x1>
 64e:	10 97       	sbiw	r26, 0x00	; 0
 650:	81 f4       	brne	.+32     	; 0x672 <free+0x3e>
 652:	20 81       	ld	r18, Z
 654:	31 81       	ldd	r19, Z+1	; 0x01
 656:	82 0f       	add	r24, r18
 658:	93 1f       	adc	r25, r19
 65a:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <__brkval>
 65e:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <__brkval+0x1>
 662:	28 17       	cp	r18, r24
 664:	39 07       	cpc	r19, r25
 666:	51 f5       	brne	.+84     	; 0x6bc <free+0x88>
 668:	f0 93 73 01 	sts	0x0173, r31	; 0x800173 <__brkval+0x1>
 66c:	e0 93 72 01 	sts	0x0172, r30	; 0x800172 <__brkval>
 670:	67 c0       	rjmp	.+206    	; 0x740 <free+0x10c>
 672:	ed 01       	movw	r28, r26
 674:	20 e0       	ldi	r18, 0x00	; 0
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	ce 17       	cp	r28, r30
 67a:	df 07       	cpc	r29, r31
 67c:	40 f4       	brcc	.+16     	; 0x68e <free+0x5a>
 67e:	4a 81       	ldd	r20, Y+2	; 0x02
 680:	5b 81       	ldd	r21, Y+3	; 0x03
 682:	9e 01       	movw	r18, r28
 684:	41 15       	cp	r20, r1
 686:	51 05       	cpc	r21, r1
 688:	f1 f0       	breq	.+60     	; 0x6c6 <free+0x92>
 68a:	ea 01       	movw	r28, r20
 68c:	f5 cf       	rjmp	.-22     	; 0x678 <free+0x44>
 68e:	d3 83       	std	Z+3, r29	; 0x03
 690:	c2 83       	std	Z+2, r28	; 0x02
 692:	40 81       	ld	r20, Z
 694:	51 81       	ldd	r21, Z+1	; 0x01
 696:	84 0f       	add	r24, r20
 698:	95 1f       	adc	r25, r21
 69a:	c8 17       	cp	r28, r24
 69c:	d9 07       	cpc	r29, r25
 69e:	59 f4       	brne	.+22     	; 0x6b6 <free+0x82>
 6a0:	88 81       	ld	r24, Y
 6a2:	99 81       	ldd	r25, Y+1	; 0x01
 6a4:	84 0f       	add	r24, r20
 6a6:	95 1f       	adc	r25, r21
 6a8:	02 96       	adiw	r24, 0x02	; 2
 6aa:	91 83       	std	Z+1, r25	; 0x01
 6ac:	80 83       	st	Z, r24
 6ae:	8a 81       	ldd	r24, Y+2	; 0x02
 6b0:	9b 81       	ldd	r25, Y+3	; 0x03
 6b2:	93 83       	std	Z+3, r25	; 0x03
 6b4:	82 83       	std	Z+2, r24	; 0x02
 6b6:	21 15       	cp	r18, r1
 6b8:	31 05       	cpc	r19, r1
 6ba:	29 f4       	brne	.+10     	; 0x6c6 <free+0x92>
 6bc:	f0 93 75 01 	sts	0x0175, r31	; 0x800175 <__flp+0x1>
 6c0:	e0 93 74 01 	sts	0x0174, r30	; 0x800174 <__flp>
 6c4:	3d c0       	rjmp	.+122    	; 0x740 <free+0x10c>
 6c6:	e9 01       	movw	r28, r18
 6c8:	fb 83       	std	Y+3, r31	; 0x03
 6ca:	ea 83       	std	Y+2, r30	; 0x02
 6cc:	49 91       	ld	r20, Y+
 6ce:	59 91       	ld	r21, Y+
 6d0:	c4 0f       	add	r28, r20
 6d2:	d5 1f       	adc	r29, r21
 6d4:	ec 17       	cp	r30, r28
 6d6:	fd 07       	cpc	r31, r29
 6d8:	61 f4       	brne	.+24     	; 0x6f2 <free+0xbe>
 6da:	80 81       	ld	r24, Z
 6dc:	91 81       	ldd	r25, Z+1	; 0x01
 6de:	84 0f       	add	r24, r20
 6e0:	95 1f       	adc	r25, r21
 6e2:	02 96       	adiw	r24, 0x02	; 2
 6e4:	e9 01       	movw	r28, r18
 6e6:	99 83       	std	Y+1, r25	; 0x01
 6e8:	88 83       	st	Y, r24
 6ea:	82 81       	ldd	r24, Z+2	; 0x02
 6ec:	93 81       	ldd	r25, Z+3	; 0x03
 6ee:	9b 83       	std	Y+3, r25	; 0x03
 6f0:	8a 83       	std	Y+2, r24	; 0x02
 6f2:	e0 e0       	ldi	r30, 0x00	; 0
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	12 96       	adiw	r26, 0x02	; 2
 6f8:	8d 91       	ld	r24, X+
 6fa:	9c 91       	ld	r25, X
 6fc:	13 97       	sbiw	r26, 0x03	; 3
 6fe:	00 97       	sbiw	r24, 0x00	; 0
 700:	19 f0       	breq	.+6      	; 0x708 <free+0xd4>
 702:	fd 01       	movw	r30, r26
 704:	dc 01       	movw	r26, r24
 706:	f7 cf       	rjmp	.-18     	; 0x6f6 <free+0xc2>
 708:	8d 91       	ld	r24, X+
 70a:	9c 91       	ld	r25, X
 70c:	11 97       	sbiw	r26, 0x01	; 1
 70e:	9d 01       	movw	r18, r26
 710:	2e 5f       	subi	r18, 0xFE	; 254
 712:	3f 4f       	sbci	r19, 0xFF	; 255
 714:	82 0f       	add	r24, r18
 716:	93 1f       	adc	r25, r19
 718:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <__brkval>
 71c:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <__brkval+0x1>
 720:	28 17       	cp	r18, r24
 722:	39 07       	cpc	r19, r25
 724:	69 f4       	brne	.+26     	; 0x740 <free+0x10c>
 726:	30 97       	sbiw	r30, 0x00	; 0
 728:	29 f4       	brne	.+10     	; 0x734 <free+0x100>
 72a:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <__flp+0x1>
 72e:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <__flp>
 732:	02 c0       	rjmp	.+4      	; 0x738 <free+0x104>
 734:	13 82       	std	Z+3, r1	; 0x03
 736:	12 82       	std	Z+2, r1	; 0x02
 738:	b0 93 73 01 	sts	0x0173, r27	; 0x800173 <__brkval+0x1>
 73c:	a0 93 72 01 	sts	0x0172, r26	; 0x800172 <__brkval>
 740:	df 91       	pop	r29
 742:	cf 91       	pop	r28
 744:	08 95       	ret

00000746 <_exit>:
 746:	f8 94       	cli

00000748 <__stop_program>:
 748:	ff cf       	rjmp	.-2      	; 0x748 <__stop_program>
